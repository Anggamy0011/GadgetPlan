-- =================================================================
-- SKRIP DATABASE LENGKAP UNTUK GADGETPLAN
-- =================================================================

-- BAGIAN 1: TABEL INTI UNTUK PRODUK DAN KATEGORI
-- -----------------------------------------------------------------
CREATE TABLE public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE
);

CREATE TABLE public.products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL CHECK (price >= 0),
  stock_quantity INTEGER NOT NULL DEFAULT 0 CHECK (stock_quantity >= 0),
  image_urls JSONB,
  category_id BIGINT REFERENCES public.categories(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- BAGIAN 2: PENGATURAN PENGGUNA (SUPABASE AUTH)
-- -----------------------------------------------------------------
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT
);

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  RETURN new;
END;
$$;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- BAGIAN 3: TABEL UNTUK FITUR E-COMMERCE DAN LAYANAN
-- -----------------------------------------------------------------
CREATE TABLE public.orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  total_amount NUMERIC NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  shipping_address JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE public.order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES public.products(id),
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  price NUMERIC NOT NULL
);

-- Data teknisi untuk ServiceGo (didefinisikan SEBELUM bookings agar FK valid)
CREATE TABLE public.service_technicians (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  expertise TEXT[],
  rating NUMERIC CHECK (rating >= 0 AND rating <= 5),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE public.service_bookings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  service_type TEXT NOT NULL,
  device_type TEXT,
  device_model TEXT NOT NULL,
  technician_id BIGINT REFERENCES public.service_technicians(id) ON DELETE SET NULL,
  fixed_price NUMERIC NOT NULL CHECK (fixed_price >= 0),
  dp_amount NUMERIC NOT NULL CHECK (dp_amount >= 0),
  scheduled_date DATE NOT NULL,
  scheduled_time TIME NOT NULL,
  issue_description TEXT,
  status TEXT NOT NULL DEFAULT 'booked',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (technician_id, scheduled_date, scheduled_time)
);

-- BAGIAN 4: TABEL UNTUK FITUR BLOG
-- -----------------------------------------------------------------
CREATE TABLE public.blog_posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  content TEXT,
  slug TEXT NOT NULL UNIQUE,
  author_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  published_at TIMESTAMPTZ DEFAULT NOW()
);

-- Menambahkan beberapa data kategori sebagai contoh awal
INSERT INTO public.categories (name) VALUES ('iPhone'), ('Aksesoris'), ('Casing');

-- BAGIAN 5: TABEL PENDUKUNG AUTH KUSTOM (OTP) & DATA TEKNISI
-- -----------------------------------------------------------------
-- OTP untuk verifikasi login (email/HP). Disarankan diakses via RPC dari server.
CREATE TABLE public.otp_codes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  identifier TEXT NOT NULL, -- email atau nomor HP
  code TEXT NOT NULL,
  expires_at TIMESTAMPTZ NOT NULL,
  consumed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Opsional: bersihkan otp kadaluarsa secara berkala dengan tugas terjadwal di Supabase.


-- RLS
ALTER TABLE public.otp_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.service_technicians ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.service_bookings ENABLE ROW LEVEL SECURITY;

-- Kebijakan minimal: baca daftar teknisi publik
CREATE POLICY "Public can read technicians" ON public.service_technicians
  FOR SELECT USING (true);

-- Booking: pengguna terautentik dapat CRUD miliknya
CREATE POLICY "Users can read own bookings" ON public.service_bookings
  FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert own bookings" ON public.service_bookings
  FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update own bookings" ON public.service_bookings
  FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete own bookings" ON public.service_bookings
  FOR DELETE USING (auth.uid() = user_id);

-- OTP: hanya insert diperbolehkan secara publik; select terbatas oleh identifier via fungsi RPC
CREATE POLICY "Allow insert OTP publicly" ON public.otp_codes
  FOR INSERT WITH CHECK (true);

-- Fungsi RPC verifikasi OTP (opsional, simple example)
CREATE OR REPLACE FUNCTION public.verify_otp(p_identifier TEXT, p_code TEXT)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE v_id BIGINT;
BEGIN
  SELECT id INTO v_id
  FROM public.otp_codes
  WHERE identifier = p_identifier
    AND code = p_code
    AND consumed_at IS NULL
    AND expires_at > NOW()
  ORDER BY created_at DESC
  LIMIT 1;

  IF v_id IS NULL THEN
    RETURN FALSE;
  END IF;

  UPDATE public.otp_codes SET consumed_at = NOW() WHERE id = v_id;
  RETURN TRUE;
END;
$$;